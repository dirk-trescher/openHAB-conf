
rule "rain sensor rains"
when
	Item RainingNow changed to Raining
then
	logInfo ("rainSensor", "rainSensor changed to raining")

	if (RoofWindow_Kitchen.state < 100) {
		sendCommand(RoofWindow_Kitchen, DOWN)
		logInfo( "rainSensor", "close kitchen roof windows due to rain" )
	}
	if (RoofWindow_Bath.state < 100) {
		sendCommand(RoofWindow_Bath, DOWN)
		logInfo( "rainSensor", "close bath roof windows due to rain" )
	}
	if ((RoofWindow_Sleep.state < 100) &&
		(now.getHour < 23 &&
		(((now.getDayOfWeek == 6 || now.getDayOfWeek == 7) && now.getHour > 9) ||
		  now.getHour > 7))) {
		sendCommand(RoofWindow_Sleep, DOWN)
		logInfo( "rainSensor", "close sleeping roof windows due to rain" )
	}

	if (Window_OfficeDoor.state == OPEN) {
		sendNotification("dirk.trescher@web.de", "Es regnet und die Tür im Arbeitszimmer ist auf!")
	}
	if (Window_Terrace.state == OPEN) {
		sendNotification("dirk.trescher@web.de", "Es regnet und die Tür zur Dachterrasse ist auf!")
	}

	postUpdate(RainingNum, 1)
end


rule "close roof window sleeping room when raining on weekdays"
when
	Time cron "0 0 7 ? * MON-FRI" or		// 7:00 each weekday
	Time cron "0 0 9 ? * SAT,SUN"			// 9:00 each Saturday and Sunday
then
	if (RainingNow.state == "Raining" && RoofWindow_Sleep.state < 100) {
		logInfo( "rainSensor", "close sleeping room roof window due to rain" )
		sendCommand(RoofWindow_Sleep, DOWN)
	}
end


rule "rain sensor dry"
when
	Item RainingNow changed to Dry
then
	logInfo ("rainSensor", "rainSensor changed to dry")

	postUpdate(RainingNum, 0)
end

rule "rain sensor heating"
when
	Time cron "0 0/5 * * * ?"		// every 5 mins
then
    if (RainingNow.state == "Raining" ||
            (Temperature.state as QuantityType<Number>).doubleValue <= (Temp_Dewpoint.state as QuantityType<Number>).doubleValue) {
        sendCommand(RainingHeating, ON)

        createTimer(now.plusSeconds(60)) [|
            sendCommand(RainingHeating, OFF)
        ]
    }
end


rule "update sensor heating graph off"
when
	Item RainingHeating changed to OFF
then
	logInfo ("rainSensor", "rainSensor heating changed to OFF")

    val mqttActions = getActions("mqtt","mqtt:broker:1fd8bb3ef8")
    mqttActions.publishMQTT("rainSensor/heating", "OFF")

	postUpdate(RainingHeatingNum, 0.1)
end


rule "update sensor heating graph on"
when
	Item RainingHeating changed to ON
then
	logInfo ("rainSensor", "rainSensor heating changed to ON")

    val mqttActions = getActions("mqtt","mqtt:broker:1fd8bb3ef8")
    mqttActions.publishMQTT("rainSensor/heating", "ON")

	postUpdate(RainingHeatingNum, 0.5)
end
