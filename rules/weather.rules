var boolean windWarningSent = false


rule "Warn if too windy"
when
	Item Wind_Speed changed
then
	if (windWarningSent == false && ((Wind_Speed.state as QuantityType<Speed>).doubleValue > 20 || (Wind_Gusts.state as QuantityType<Temperature>).doubleValue > 30)) {
		sendNotification("dirk.trescher@web.de", "Sehr windig " + Wind_Speed.state + ", in Böen " + Wind_Gusts.state + " - Schirme auf Dachterrasse versorgen und Windsurfen gehen :-)")
		windWarningSent = true
	}
end

rule "reset wind warning"
when
	Time cron "0 0 0 * * ?"		// 0:00 each day
then
	windWarningSent = false
end


rule "Warn if too long no rain in winter - reset"
when
	Item Precip_Total changed
then
	if (Precip_Total.state as Number > 2|mm) {
        logInfo("Weather", "Warn_no_rain " + Warn_no_rain)
		postUpdate(Warn_no_rain, 0)
	}
end

rule "Warn if too long no rain in winter - increment"
when
	Time cron "0 0 0 * * ?"		// 0:00 each day
then
	if (WateringPeriod.state == OFF) {
		if (Warn_no_rain.state == NULL) {
			Warn_no_rain.postUpdate(0)
            return
		}
		var days = (Warn_no_rain.state as DecimalType).intValue + 1
		if (days > 7) {
			sendNotification("dirk.trescher@web.de", "Zu lange kein Regen - Dachterrasse gießen")
			days = 5        // warn every other day
		}
		Warn_no_rain.postUpdate(days)
	}
end

rule "update Raining Heartbeat Date"
when
    Item RainingHeartbeat changed
then
    postUpdate(RainingHeartbeatDate, now.toLocalDateTime().toString())
end
